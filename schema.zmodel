// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

plugin trpc {
    provider = '@zenstackhq/trpc'
    output = 'src/server/routers/generated'
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id String @id @default(cuid())
    name String?
    netid String?
    student_number String?
    email String @unique
    emailVerified DateTime?
    image String?
    accounts Account[]
    sessions Session[]
    codeRuns CodeRun[]
    lessons Lesson[]
    learning Learning?
    roles Role[] @@allow('update', auth().roles?[permissions?[name == 'modify_role']])

    @@allow('create,read', true)
    @@allow('update,delete', auth() == this)
}

model Learning {
    id String @id @default(cuid())
    user User @relation(fields: [userId], references: [id])
    userId String @unique
    completedLessons Lesson[]
    pinnedSubject Subject @relation(fields: [subjectName], references: [name])
    subjectName String

    @@allow('create', auth() != null)
    @@allow('read,update,delete', auth() == user)
}

model Role {
    id Int @id @default(autoincrement())
    name String
    permissions Permission[]
    users User[]

    @@allow('read', true)
    @@allow('update', auth().roles?[permissions?[name == 'modify_role']])
    @@allow('create', auth().roles?[permissions?[name == 'create_role']])
}

model Permission {
    id Int @id @default(autoincrement())
    name String
    roles Role[]
}

model CodeRun {
    id Int @id @default(autoincrement())
    time BigInt
    createdAt DateTime @default(now())
    createdBy User @relation(fields: [createdById], references: [id])
    createdById String

    @@index([time])
}

model Subject {
    name String @id
    createdAt DateTime @default(now())
    lessons Lesson[]
    learnings Learning[]

    @@allow('read', true)
    @@allow('create', auth().roles?[permissions?[name == 'create_subject']])
    @@allow('update,delete', auth().roles?[permissions?[name == 'modify_subject']])
}

model Lesson {
    id String @id @default(cuid())
    author User? @relation(fields: [authorId], references: [id])
    subject Subject @relation(fields: [subName], references: [name])
    subName String
    authorId String
    content String @db.LongText
    learnings Learning[]

    @@allow('read', true)
    @@allow('create', auth().roles?[permissions?[name == 'create_lesson']])
    @@allow('update,delete', auth() == author || auth().roles?[permissions?[name == 'modify_lesson']])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
