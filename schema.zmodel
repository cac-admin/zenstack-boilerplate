// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

plugin hooks {
    provider = "@zenstackhq/swr"
    output = "./src/lib/hooks"
}

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    netid         String?
    student_number String?
    email         String   @unique
    emailVerified DateTime?
    password      String @password @omit
    image         String?
    accounts      Account[]
    sessions      Session[]
    codeRuns      CodeRun[]
    lessons       Lesson[]
    role          String @default("USER")

    @@allow('create,read', true)
    @@allow('update,delete', auth() == this)
}

model CodeRun {
    id Int @id @default(autoincrement())
    time BigInt
    createdAt DateTime @default(now())
    createdBy User @relation(fields: [createdById], references: [id])
    createdById String

    @@index([time])
}

model Subject {
    id String @id @default(cuid())
    title String @unique
    createdAt DateTime @default(now())
    lessons Lesson[]
}

model Lesson {
    id String @id @default(cuid())
    author User? @relation(fields: [authorId], references: [id])
    subject Subject @relation(fields: [subId], references: [id], onDelete: Cascade)
    subId String
    authorId String
    content String

    @@allow('read', true)
    @@allow('create,update,delete', (auth() == author && author.role == "AUTHOR" || auth().role == "ADMIN"))
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
